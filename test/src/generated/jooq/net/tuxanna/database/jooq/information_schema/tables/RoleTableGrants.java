/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * one row for each privilege grant on a table to a role
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleTableGrants extends TableImpl<Record> {

    private static final long serialVersionUID = 449164004;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS</code>
     */
    public static final RoleTableGrants ROLE_TABLE_GRANTS = new RoleTableGrants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.GRANTOR</code>.
     */
    public final TableField<Record, String> GRANTOR = createField(DSL.name("GRANTOR"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.GRANTEE</code>.
     */
    public final TableField<Record, String> GRANTEE = createField(DSL.name("GRANTEE"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.TABLE_CATALOG</code>.
     */
    public final TableField<Record, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.TABLE_SCHEMA</code>.
     */
    public final TableField<Record, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.TABLE_NAME</code>.
     */
    public final TableField<Record, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.PRIVILEGE_TYPE</code>.
     */
    public final TableField<Record, String> PRIVILEGE_TYPE = createField(DSL.name("PRIVILEGE_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(65536), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.IS_GRANTABLE</code>.
     */
    public final TableField<Record, String> IS_GRANTABLE = createField(DSL.name("IS_GRANTABLE"), org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS.WITH_HIERARCHY</code>.
     */
    public final TableField<Record, String> WITH_HIERARCHY = createField(DSL.name("WITH_HIERARCHY"), org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * Create a <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS</code> table reference
     */
    public RoleTableGrants() {
        this(DSL.name("ROLE_TABLE_GRANTS"), null);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS</code> table reference
     */
    public RoleTableGrants(String alias) {
        this(DSL.name(alias), ROLE_TABLE_GRANTS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.ROLE_TABLE_GRANTS</code> table reference
     */
    public RoleTableGrants(Name alias) {
        this(alias, ROLE_TABLE_GRANTS);
    }

    private RoleTableGrants(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RoleTableGrants(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("one row for each privilege grant on a table to a role"), TableOptions.table());
    }

    public <O extends Record> RoleTableGrants(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ROLE_TABLE_GRANTS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public RoleTableGrants as(String alias) {
        return new RoleTableGrants(DSL.name(alias), this);
    }

    @Override
    public RoleTableGrants as(Name alias) {
        return new RoleTableGrants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleTableGrants rename(String name) {
        return new RoleTableGrants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleTableGrants rename(Name name) {
        return new RoleTableGrants(name, null);
    }
}
