/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * a description of how the accessible tables defined within this database 
 * import visible columns to enforce referential integrity
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemCrossreference extends TableImpl<Record> {

    private static final long serialVersionUID = 318628402;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE</code>
     */
    public static final SystemCrossreference SYSTEM_CROSSREFERENCE = new SystemCrossreference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.PKTABLE_CAT</code>. the catalog in which the referenced table is defined
     */
    public final TableField<Record, String> PKTABLE_CAT = createField(DSL.name("PKTABLE_CAT"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the catalog in which the referenced table is defined");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.PKTABLE_SCHEM</code>. the schema in which the referenced table is defined
     */
    public final TableField<Record, String> PKTABLE_SCHEM = createField(DSL.name("PKTABLE_SCHEM"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the schema in which the referenced table is defined");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.PKTABLE_NAME</code>. simple name of the referenced table
     */
    public final TableField<Record, String> PKTABLE_NAME = createField(DSL.name("PKTABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "simple name of the referenced table");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.PKCOLUMN_NAME</code>. simple name of the referenced column
     */
    public final TableField<Record, String> PKCOLUMN_NAME = createField(DSL.name("PKCOLUMN_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "simple name of the referenced column");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.FKTABLE_CAT</code>. the catalog in which the referencing table is defined
     */
    public final TableField<Record, String> FKTABLE_CAT = createField(DSL.name("FKTABLE_CAT"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the catalog in which the referencing table is defined");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.FKTABLE_SCHEM</code>. the schema in which the referencing table is defined
     */
    public final TableField<Record, String> FKTABLE_SCHEM = createField(DSL.name("FKTABLE_SCHEM"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the schema in which the referencing table is defined");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.FKTABLE_NAME</code>. the simple name of the referencing table
     */
    public final TableField<Record, String> FKTABLE_NAME = createField(DSL.name("FKTABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the simple name of the referencing table");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.FKCOLUMN_NAME</code>. the simple name of the referencing column
     */
    public final TableField<Record, String> FKCOLUMN_NAME = createField(DSL.name("FKCOLUMN_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the simple name of the referencing column");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.KEY_SEQ</code>. sequence number within foreign key definition
     */
    public final TableField<Record, Short> KEY_SEQ = createField(DSL.name("KEY_SEQ"), org.jooq.impl.SQLDataType.SMALLINT, this, "sequence number within foreign key definition");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.UPDATE_RULE</code>. how does an update of referenced row columns affect referencing rows?: e.g. { Cascade | Set Null | Set Default | Restrict (No Action) }
     */
    public final TableField<Record, Short> UPDATE_RULE = createField(DSL.name("UPDATE_RULE"), org.jooq.impl.SQLDataType.SMALLINT, this, "how does an update of referenced row columns affect referencing rows?: e.g. { Cascade | Set Null | Set Default | Restrict (No Action) }");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.DELETE_RULE</code>. how does deletion of a referenced row affect referencing rows?: e.g. { Cascade | Set Null | Set Default | Restrict (No Action) }
     */
    public final TableField<Record, Short> DELETE_RULE = createField(DSL.name("DELETE_RULE"), org.jooq.impl.SQLDataType.SMALLINT, this, "how does deletion of a referenced row affect referencing rows?: e.g. { Cascade | Set Null | Set Default | Restrict (No Action) }");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.FK_NAME</code>. the name of the foreign key
     */
    public final TableField<Record, String> FK_NAME = createField(DSL.name("FK_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the name of the foreign key");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.PK_NAME</code>. the name of the referenced column set (usually the name of a primary key constraint, but may be a unique constraint or even the name of a non-unique index previous to 1.7.0)
     */
    public final TableField<Record, String> PK_NAME = createField(DSL.name("PK_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "the name of the referenced column set (usually the name of a primary key constraint, but may be a unique constraint or even the name of a non-unique index previous to 1.7.0)");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE.DEFERRABILITY</code>. foreign key constraints deferred until commit?: e.g. { initially deferred | initially immediate | not deferrable }
     */
    public final TableField<Record, Short> DEFERRABILITY = createField(DSL.name("DEFERRABILITY"), org.jooq.impl.SQLDataType.SMALLINT, this, "foreign key constraints deferred until commit?: e.g. { initially deferred | initially immediate | not deferrable }");

    /**
     * Create a <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE</code> table reference
     */
    public SystemCrossreference() {
        this(DSL.name("SYSTEM_CROSSREFERENCE"), null);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE</code> table reference
     */
    public SystemCrossreference(String alias) {
        this(DSL.name(alias), SYSTEM_CROSSREFERENCE);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE</code> table reference
     */
    public SystemCrossreference(Name alias) {
        this(alias, SYSTEM_CROSSREFERENCE);
    }

    private SystemCrossreference(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SystemCrossreference(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("a description of how the accessible tables defined within this database import visible columns to enforce referential integrity"), TableOptions.table());
    }

    public <O extends Record> SystemCrossreference(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSTEM_CROSSREFERENCE);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SystemCrossreference as(String alias) {
        return new SystemCrossreference(DSL.name(alias), this);
    }

    @Override
    public SystemCrossreference as(Name alias) {
        return new SystemCrossreference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemCrossreference rename(String name) {
        return new SystemCrossreference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemCrossreference rename(Name name) {
        return new SystemCrossreference(name, null);
    }
}
