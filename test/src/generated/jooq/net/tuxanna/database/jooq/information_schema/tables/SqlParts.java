/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * list of supported SQL Standard parts
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SqlParts extends TableImpl<Record> {

    private static final long serialVersionUID = 55020625;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.SQL_PARTS</code>
     */
    public static final SqlParts SQL_PARTS = new SqlParts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.SQL_PARTS.PART</code>.
     */
    public final TableField<Record, String> PART = createField(DSL.name("PART"), org.jooq.impl.SQLDataType.VARCHAR(65536), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SQL_PARTS.NAME</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(65536), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SQL_PARTS.IS_SUPPORTED</code>.
     */
    public final TableField<Record, String> IS_SUPPORTED = createField(DSL.name("IS_SUPPORTED"), org.jooq.impl.SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SQL_PARTS.IS_VERIFIED_BY</code>.
     */
    public final TableField<Record, String> IS_VERIFIED_BY = createField(DSL.name("IS_VERIFIED_BY"), org.jooq.impl.SQLDataType.VARCHAR(65536), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SQL_PARTS.COMMENTS</code>.
     */
    public final TableField<Record, String> COMMENTS = createField(DSL.name("COMMENTS"), org.jooq.impl.SQLDataType.VARCHAR(65536), this, "");

    /**
     * Create a <code>INFORMATION_SCHEMA.SQL_PARTS</code> table reference
     */
    public SqlParts() {
        this(DSL.name("SQL_PARTS"), null);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SQL_PARTS</code> table reference
     */
    public SqlParts(String alias) {
        this(DSL.name(alias), SQL_PARTS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SQL_PARTS</code> table reference
     */
    public SqlParts(Name alias) {
        this(alias, SQL_PARTS);
    }

    private SqlParts(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SqlParts(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("list of supported SQL Standard parts"), TableOptions.table());
    }

    public <O extends Record> SqlParts(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SQL_PARTS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SqlParts as(String alias) {
        return new SqlParts(DSL.name(alias), this);
    }

    @Override
    public SqlParts as(Name alias) {
        return new SqlParts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlParts rename(String name) {
        return new SqlParts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlParts rename(Name name) {
        return new SqlParts(name, null);
    }
}
