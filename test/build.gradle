/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */


plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
 
    id 'nu.studer.jooq' version '5.1.0'

}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}
dependencies {
	    
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

	implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
	implementation 'info.picocli:picocli:4.5.1'
	annotationProcessor 'info.picocli:picocli-codegen:4.5.1'
	    
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    jooqGenerator 'com.h2database:h2:1.4.200'
}

jooq {
  version = '3.13.4'  // the default (can be omitted)
  edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)
}


jooq {
    version = '3.13.4'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.h2.Driver'
                    url = 'jdbc:h2:~/test;AUTO_SERVER=TRUE'
                    user = 'sa'
                    password = ''
                    properties {
                        property {
                            key = 'PAGE_SIZE'
                            value = 2048
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.h2.H2Database'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = false
                        immutablePojos = false
                        fluentSetters = false
                    }
                    target {
                        packageName = 'nu.studer.sample'
                        directory = 'src/generated/jooq'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}

jar {
	    manifest {
	        attributes "Main-Class": "test.testMain"
	    }
	 
	    from {
	        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	    }
	}
