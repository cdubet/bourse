/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * one row for each user and one row for each role
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authorizations extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.AUTHORIZATIONS</code>
     */
    public static final Authorizations AUTHORIZATIONS = new Authorizations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>INFORMATION_SCHEMA.AUTHORIZATIONS.AUTHORIZATION_NAME</code>.
     */
    public final TableField<Record, String> AUTHORIZATION_NAME = createField(DSL.name("AUTHORIZATION_NAME"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.AUTHORIZATIONS.AUTHORIZATION_TYPE</code>.
     */
    public final TableField<Record, String> AUTHORIZATION_TYPE = createField(DSL.name("AUTHORIZATION_TYPE"), SQLDataType.VARCHAR(128), this, "");

    private Authorizations(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Authorizations(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("one row for each user and one row for each role"), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.AUTHORIZATIONS</code> table
     * reference
     */
    public Authorizations(String alias) {
        this(DSL.name(alias), AUTHORIZATIONS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.AUTHORIZATIONS</code> table
     * reference
     */
    public Authorizations(Name alias) {
        this(alias, AUTHORIZATIONS);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.AUTHORIZATIONS</code> table reference
     */
    public Authorizations() {
        this(DSL.name("AUTHORIZATIONS"), null);
    }

    public <O extends Record> Authorizations(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, AUTHORIZATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public Authorizations as(String alias) {
        return new Authorizations(DSL.name(alias), this);
    }

    @Override
    public Authorizations as(Name alias) {
        return new Authorizations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorizations rename(String name) {
        return new Authorizations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorizations rename(Name name) {
        return new Authorizations(name, null);
    }
}
