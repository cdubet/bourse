/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * the system properties and operating parameters of this database
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemProperties extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES</code>
     */
    public static final SystemProperties SYSTEM_PROPERTIES = new SystemProperties();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES.PROPERTY_SCOPE</code>. the
     * scope of the property, e.g. ( TEMPORARY | TRANSACTION | SESSION | ...}
     */
    public final TableField<Record, String> PROPERTY_SCOPE = createField(DSL.name("PROPERTY_SCOPE"), SQLDataType.VARCHAR(65536), this, "the scope of the property, e.g. ( TEMPORARY | TRANSACTION | SESSION | ...}");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES.PROPERTY_NAMESPACE</code>. the
     * namespace in which the property is applicable, e.g. ( database.properties
     * | org.hsqldb.Database | java.sql.DatabaseMetaData | ...)
     */
    public final TableField<Record, String> PROPERTY_NAMESPACE = createField(DSL.name("PROPERTY_NAMESPACE"), SQLDataType.VARCHAR(65536), this, "the namespace in which the property is applicable, e.g. ( database.properties | org.hsqldb.Database | java.sql.DatabaseMetaData | ...)");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES.PROPERTY_NAME</code>. the name
     * of the property
     */
    public final TableField<Record, String> PROPERTY_NAME = createField(DSL.name("PROPERTY_NAME"), SQLDataType.VARCHAR(65536), this, "the name of the property");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES.PROPERTY_VALUE</code>. the
     * current value of the property
     */
    public final TableField<Record, String> PROPERTY_VALUE = createField(DSL.name("PROPERTY_VALUE"), SQLDataType.VARCHAR(65536), this, "the current value of the property");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES.PROPERTY_CLASS</code>. the
     * type of the value, e.g. ( int | boolean | java.lang.String | ...)
     */
    public final TableField<Record, String> PROPERTY_CLASS = createField(DSL.name("PROPERTY_CLASS"), SQLDataType.VARCHAR(65536), this, "the type of the value, e.g. ( int | boolean | java.lang.String | ...)");

    private SystemProperties(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SystemProperties(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("the system properties and operating parameters of this database"), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES</code> table
     * reference
     */
    public SystemProperties(String alias) {
        this(DSL.name(alias), SYSTEM_PROPERTIES);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES</code> table
     * reference
     */
    public SystemProperties(Name alias) {
        this(alias, SYSTEM_PROPERTIES);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.SYSTEM_PROPERTIES</code> table
     * reference
     */
    public SystemProperties() {
        this(DSL.name("SYSTEM_PROPERTIES"), null);
    }

    public <O extends Record> SystemProperties(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSTEM_PROPERTIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SystemProperties as(String alias) {
        return new SystemProperties(DSL.name(alias), this);
    }

    @Override
    public SystemProperties as(Name alias) {
        return new SystemProperties(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemProperties rename(String name) {
        return new SystemProperties(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemProperties rename(Name name) {
        return new SystemProperties(name, null);
    }
}
