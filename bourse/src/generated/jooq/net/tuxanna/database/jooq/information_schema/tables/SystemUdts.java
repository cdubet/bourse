/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * the user-defined types that are available within this database
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemUdts extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.SYSTEM_UDTS</code>
     */
    public static final SystemUdts SYSTEM_UDTS = new SystemUdts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_UDTS.TYPE_CAT</code>. type's
     * catalog
     */
    public final TableField<Record, String> TYPE_CAT = createField(DSL.name("TYPE_CAT"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "type's catalog");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_UDTS.TYPE_SCHEM</code>. type's
     * schema
     */
    public final TableField<Record, String> TYPE_SCHEM = createField(DSL.name("TYPE_SCHEM"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "type's schema");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_UDTS.TYPE_NAME</code>. type's
     * DBMS name
     */
    public final TableField<Record, String> TYPE_NAME = createField(DSL.name("TYPE_NAME"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "type's DBMS name");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_UDTS.CLASS_NAME</code>. type's
     * Java class name
     */
    public final TableField<Record, String> CLASS_NAME = createField(DSL.name("CLASS_NAME"), net.tuxanna.database.jooq.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "type's Java class name");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_UDTS.DATA_TYPE</code>. type
     * value defined in DITypes, from one of { "JAVA_OBJECT" | "STRUCT" |
     * "DISTINCT" }
     */
    public final TableField<Record, Integer> DATA_TYPE = createField(DSL.name("DATA_TYPE"), SQLDataType.INTEGER, this, "type value defined in DITypes, from one of { \"JAVA_OBJECT\" | \"STRUCT\" | \"DISTINCT\" }");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_UDTS.REMARKS</code>.
     * explanatory comment on the user defined type
     */
    public final TableField<Record, String> REMARKS = createField(DSL.name("REMARKS"), net.tuxanna.database.jooq.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "explanatory comment on the user defined type");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_UDTS.BASE_TYPE</code>. type
     * code of the source type of a DISTINCT type or the type that implements
     * the user-generated reference type of the SELF_REFERENCING_COLUMN of a
     * structured type as defined in DITypes (null if DATA_TYPE is not DISTINCT
     * or not STRUCT with REFERENCE_GENERATION = USER_DEFINED)
     */
    public final TableField<Record, Short> BASE_TYPE = createField(DSL.name("BASE_TYPE"), SQLDataType.SMALLINT, this, "type code of the source type of a DISTINCT type or the type that implements the user-generated reference type of the SELF_REFERENCING_COLUMN of a structured type as defined in DITypes (null if DATA_TYPE is not DISTINCT or not STRUCT with REFERENCE_GENERATION = USER_DEFINED)");

    private SystemUdts(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SystemUdts(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("the user-defined types that are available within this database"), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_UDTS</code> table
     * reference
     */
    public SystemUdts(String alias) {
        this(DSL.name(alias), SYSTEM_UDTS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_UDTS</code> table
     * reference
     */
    public SystemUdts(Name alias) {
        this(alias, SYSTEM_UDTS);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.SYSTEM_UDTS</code> table reference
     */
    public SystemUdts() {
        this(DSL.name("SYSTEM_UDTS"), null);
    }

    public <O extends Record> SystemUdts(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSTEM_UDTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SystemUdts as(String alias) {
        return new SystemUdts(DSL.name(alias), this);
    }

    @Override
    public SystemUdts as(Name alias) {
        return new SystemUdts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemUdts rename(String name) {
        return new SystemUdts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemUdts rename(Name name) {
        return new SystemUdts(name, null);
    }
}
