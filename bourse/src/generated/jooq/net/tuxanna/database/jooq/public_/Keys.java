/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.public_;


import net.tuxanna.database.jooq.public_.tables.Account;
import net.tuxanna.database.jooq.public_.tables.Buy;
import net.tuxanna.database.jooq.public_.tables.Portfolio;
import net.tuxanna.database.jooq.public_.tables.Quotes;
import net.tuxanna.database.jooq.public_.tables.Sell;
import net.tuxanna.database.jooq.public_.tables.Shares;

import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * PUBLIC.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> SYS_PK_10115 = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("SYS_PK_10115"), new TableField[] { Account.ACCOUNT.IDACCOUNT }, true);
    public static final UniqueKey<Record> SYS_PK_10151 = Internal.createUniqueKey(Buy.BUY, DSL.name("SYS_PK_10151"), new TableField[] { Buy.BUY.IDBUY }, true);
    public static final UniqueKey<Record> SYS_PK_10121 = Internal.createUniqueKey(Portfolio.PORTFOLIO, DSL.name("SYS_PK_10121"), new TableField[] { Portfolio.PORTFOLIO.IDPORTFOLIO }, true);
    public static final UniqueKey<Record> SYS_PK_10104 = Internal.createUniqueKey(Quotes.QUOTES, DSL.name("SYS_PK_10104"), new TableField[] { Quotes.QUOTES.IDQUOTES }, true);
    public static final UniqueKey<Record> SYS_PK_10133 = Internal.createUniqueKey(Sell.SELL, DSL.name("SYS_PK_10133"), new TableField[] { Sell.SELL.IDSELL }, true);
    public static final UniqueKey<Record> SYS_PK_10092 = Internal.createUniqueKey(Shares.SHARES, DSL.name("SYS_PK_10092"), new TableField[] { Shares.SHARES.IDSHARE }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Record, Record> SYS_FK_10156 = Internal.createForeignKey(Buy.BUY, DSL.name("SYS_FK_10156"), new TableField[] { Buy.BUY.IDSHARE }, Keys.SYS_PK_10092, new TableField[] { Shares.SHARES.IDSHARE }, true);
    public static final ForeignKey<Record, Record> SYS_FK_10157 = Internal.createForeignKey(Buy.BUY, DSL.name("SYS_FK_10157"), new TableField[] { Buy.BUY.IDACCOUNT }, Keys.SYS_PK_10115, new TableField[] { Account.ACCOUNT.IDACCOUNT }, true);
    public static final ForeignKey<Record, Record> SYS_FK_10123 = Internal.createForeignKey(Portfolio.PORTFOLIO, DSL.name("SYS_FK_10123"), new TableField[] { Portfolio.PORTFOLIO.IDSHARE }, Keys.SYS_PK_10092, new TableField[] { Shares.SHARES.IDSHARE }, true);
    public static final ForeignKey<Record, Record> SYS_FK_10124 = Internal.createForeignKey(Portfolio.PORTFOLIO, DSL.name("SYS_FK_10124"), new TableField[] { Portfolio.PORTFOLIO.IDACCOUNT }, Keys.SYS_PK_10115, new TableField[] { Account.ACCOUNT.IDACCOUNT }, true);
    public static final ForeignKey<Record, Record> SYS_FK_10107 = Internal.createForeignKey(Quotes.QUOTES, DSL.name("SYS_FK_10107"), new TableField[] { Quotes.QUOTES.IDSHARE }, Keys.SYS_PK_10092, new TableField[] { Shares.SHARES.IDSHARE }, true);
    public static final ForeignKey<Record, Record> SYS_FK_10138 = Internal.createForeignKey(Sell.SELL, DSL.name("SYS_FK_10138"), new TableField[] { Sell.SELL.IDSHARE }, Keys.SYS_PK_10092, new TableField[] { Shares.SHARES.IDSHARE }, true);
    public static final ForeignKey<Record, Record> SYS_FK_10139 = Internal.createForeignKey(Sell.SELL, DSL.name("SYS_FK_10139"), new TableField[] { Sell.SELL.IDACCOUNT }, Keys.SYS_PK_10115, new TableField[] { Account.ACCOUNT.IDACCOUNT }, true);
}
