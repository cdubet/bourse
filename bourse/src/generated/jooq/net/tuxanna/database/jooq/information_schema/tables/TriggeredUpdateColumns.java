/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * one row for each column in a foreign key cascade action
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TriggeredUpdateColumns extends TableImpl<Record> {

    private static final long serialVersionUID = -21540716;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS</code>
     */
    public static final TriggeredUpdateColumns TRIGGERED_UPDATE_COLUMNS = new TriggeredUpdateColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS.TRIGGER_CATALOG</code>.
     */
    public final TableField<Record, String> TRIGGER_CATALOG = createField(DSL.name("TRIGGER_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS.TRIGGER_SCHEMA</code>.
     */
    public final TableField<Record, String> TRIGGER_SCHEMA = createField(DSL.name("TRIGGER_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS.TRIGGER_NAME</code>.
     */
    public final TableField<Record, String> TRIGGER_NAME = createField(DSL.name("TRIGGER_NAME"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS.EVENT_OBJECT_CATALOG</code>.
     */
    public final TableField<Record, String> EVENT_OBJECT_CATALOG = createField(DSL.name("EVENT_OBJECT_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS.EVENT_OBJECT_SCHEMA</code>.
     */
    public final TableField<Record, String> EVENT_OBJECT_SCHEMA = createField(DSL.name("EVENT_OBJECT_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS.EVENT_OBJECT_TABLE</code>.
     */
    public final TableField<Record, String> EVENT_OBJECT_TABLE = createField(DSL.name("EVENT_OBJECT_TABLE"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS.EVENT_OBJECT_COLUMN</code>.
     */
    public final TableField<Record, String> EVENT_OBJECT_COLUMN = createField(DSL.name("EVENT_OBJECT_COLUMN"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS</code> table reference
     */
    public TriggeredUpdateColumns() {
        this(DSL.name("TRIGGERED_UPDATE_COLUMNS"), null);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS</code> table reference
     */
    public TriggeredUpdateColumns(String alias) {
        this(DSL.name(alias), TRIGGERED_UPDATE_COLUMNS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.TRIGGERED_UPDATE_COLUMNS</code> table reference
     */
    public TriggeredUpdateColumns(Name alias) {
        this(alias, TRIGGERED_UPDATE_COLUMNS);
    }

    private TriggeredUpdateColumns(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private TriggeredUpdateColumns(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("one row for each column in a foreign key cascade action"), TableOptions.table());
    }

    public <O extends Record> TriggeredUpdateColumns(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TRIGGERED_UPDATE_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public TriggeredUpdateColumns as(String alias) {
        return new TriggeredUpdateColumns(DSL.name(alias), this);
    }

    @Override
    public TriggeredUpdateColumns as(Name alias) {
        return new TriggeredUpdateColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredUpdateColumns rename(String name) {
        return new TriggeredUpdateColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredUpdateColumns rename(Name name) {
        return new TriggeredUpdateColumns(name, null);
    }
}
