/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.public_.tables;


import net.tuxanna.database.jooq.public_.Keys;
import net.tuxanna.database.jooq.public_.Public;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shares extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.SHARES</code>
     */
    public static final Shares SHARES = new Shares();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>PUBLIC.SHARES.IDSHARE</code>.
     */
    public final TableField<Record, Integer> IDSHARE = createField(DSL.name("IDSHARE"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.SHARES.NAME</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SHARES.TICKER</code>.
     */
    public final TableField<Record, String> TICKER = createField(DSL.name("TICKER"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SHARES.IS_SHARE</code>.
     */
    public final TableField<Record, String> IS_SHARE = createField(DSL.name("IS_SHARE"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("'Y'", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>PUBLIC.SHARES.CURRENCY</code>.
     */
    public final TableField<Record, String> CURRENCY = createField(DSL.name("CURRENCY"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("'E'", SQLDataType.CHAR)), this, "");

    private Shares(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Shares(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.SHARES</code> table reference
     */
    public Shares(String alias) {
        this(DSL.name(alias), SHARES);
    }

    /**
     * Create an aliased <code>PUBLIC.SHARES</code> table reference
     */
    public Shares(Name alias) {
        this(alias, SHARES);
    }

    /**
     * Create a <code>PUBLIC.SHARES</code> table reference
     */
    public Shares() {
        this(DSL.name("SHARES"), null);
    }

    public <O extends Record> Shares(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SHARES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return (Identity<Record, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.SYS_PK_10093;
    }

    @Override
    public Shares as(String alias) {
        return new Shares(DSL.name(alias), this);
    }

    @Override
    public Shares as(Name alias) {
        return new Shares(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shares rename(String name) {
        return new Shares(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shares rename(Name name) {
        return new Shares(name, null);
    }
}
