/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Translations extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.TRANSLATIONS</code>
     */
    public static final Translations TRANSLATIONS = new Translations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TRANSLATION_CATALOG</code>.
     */
    public final TableField<Record, String> TRANSLATION_CATALOG = createField(DSL.name("TRANSLATION_CATALOG"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TRANSLATION_SCHEMA</code>.
     */
    public final TableField<Record, String> TRANSLATION_SCHEMA = createField(DSL.name("TRANSLATION_SCHEMA"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TRANSLATION_NAME</code>.
     */
    public final TableField<Record, String> TRANSLATION_NAME = createField(DSL.name("TRANSLATION_NAME"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.SOURCE_CHARACTER_SET_CATALOG</code>.
     */
    public final TableField<Record, String> SOURCE_CHARACTER_SET_CATALOG = createField(DSL.name("SOURCE_CHARACTER_SET_CATALOG"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.SOURCE_CHARACTER_SET_SCHEMA</code>.
     */
    public final TableField<Record, String> SOURCE_CHARACTER_SET_SCHEMA = createField(DSL.name("SOURCE_CHARACTER_SET_SCHEMA"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.SOURCE_CHARACTER_SET_NAME</code>.
     */
    public final TableField<Record, String> SOURCE_CHARACTER_SET_NAME = createField(DSL.name("SOURCE_CHARACTER_SET_NAME"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TARGET_CHARACTER_SET_CATALOG</code>.
     */
    public final TableField<Record, String> TARGET_CHARACTER_SET_CATALOG = createField(DSL.name("TARGET_CHARACTER_SET_CATALOG"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TARGET_CHARACTER_SET_SCHEMA</code>.
     */
    public final TableField<Record, String> TARGET_CHARACTER_SET_SCHEMA = createField(DSL.name("TARGET_CHARACTER_SET_SCHEMA"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TARGET_CHARACTER_SET_NAME</code>.
     */
    public final TableField<Record, String> TARGET_CHARACTER_SET_NAME = createField(DSL.name("TARGET_CHARACTER_SET_NAME"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TRANSLATION_SOURCE_CATALOG</code>.
     */
    public final TableField<Record, String> TRANSLATION_SOURCE_CATALOG = createField(DSL.name("TRANSLATION_SOURCE_CATALOG"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TRANSLATION_SOURCE_SCHEMA</code>.
     */
    public final TableField<Record, String> TRANSLATION_SOURCE_SCHEMA = createField(DSL.name("TRANSLATION_SOURCE_SCHEMA"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.TRANSLATIONS.TRANSLATION_SOURCE_NAME</code>.
     */
    public final TableField<Record, String> TRANSLATION_SOURCE_NAME = createField(DSL.name("TRANSLATION_SOURCE_NAME"), SQLDataType.VARCHAR(128), this, "");

    private Translations(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Translations(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.TRANSLATIONS</code> table reference
     */
    public Translations(String alias) {
        this(DSL.name(alias), TRANSLATIONS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.TRANSLATIONS</code> table reference
     */
    public Translations(Name alias) {
        this(alias, TRANSLATIONS);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.TRANSLATIONS</code> table reference
     */
    public Translations() {
        this(DSL.name("TRANSLATIONS"), null);
    }

    public <O extends Record> Translations(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TRANSLATIONS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public Translations as(String alias) {
        return new Translations(DSL.name(alias), this);
    }

    @Override
    public Translations as(Name alias) {
        return new Translations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Translations rename(String name) {
        return new Translations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Translations rename(Name name) {
        return new Translations(name, null);
    }
}
