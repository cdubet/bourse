/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * the procedures, SQL functions, trigger body routines and UDT methods defined
 * within the database
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemProcedures extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES</code>
     */
    public static final SystemProcedures SYSTEM_PROCEDURES = new SystemProcedures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.PROCEDURE_CAT</code>. catalog
     * in which procedure is defined
     */
    public final TableField<Record, String> PROCEDURE_CAT = createField(DSL.name("PROCEDURE_CAT"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "catalog in which procedure is defined");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.PROCEDURE_SCHEM</code>. schema
     * in which procedure is defined
     */
    public final TableField<Record, String> PROCEDURE_SCHEM = createField(DSL.name("PROCEDURE_SCHEM"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "schema in which procedure is defined");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.PROCEDURE_NAME</code>.
     * procedure identifier
     */
    public final TableField<Record, String> PROCEDURE_NAME = createField(DSL.name("PROCEDURE_NAME"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "procedure identifier");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.COL_4</code>.
     */
    public final TableField<Record, Integer> COL_4 = createField(DSL.name("COL_4"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.COL_5</code>.
     */
    public final TableField<Record, Integer> COL_5 = createField(DSL.name("COL_5"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.COL_6</code>.
     */
    public final TableField<Record, Integer> COL_6 = createField(DSL.name("COL_6"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.REMARKS</code>.
     * explanatory comment on the procedure
     */
    public final TableField<Record, String> REMARKS = createField(DSL.name("REMARKS"), net.tuxanna.database.jooq.information_schema.Domains.CHARACTER_DATA.getDataType(), this, "explanatory comment on the procedure");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.PROCEDURE_TYPE</code>. kind of
     * procedure: { Unknown | No Result | Returns Result }
     */
    public final TableField<Record, Short> PROCEDURE_TYPE = createField(DSL.name("PROCEDURE_TYPE"), SQLDataType.SMALLINT, this, "kind of procedure: { Unknown | No Result | Returns Result }");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.SPECIFIC_NAME</code>.
     * typically, (but not limited to) the fully qualified name and signature of
     * the Java method providing the SQL-invoked routine's entry point
     */
    public final TableField<Record, String> SPECIFIC_NAME = createField(DSL.name("SPECIFIC_NAME"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "typically, (but not limited to) the fully qualified name and signature of the Java method providing the SQL-invoked routine's entry point");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES.FUNCTION_TYPE</code>.
     */
    public final TableField<Record, Integer> FUNCTION_TYPE = createField(DSL.name("FUNCTION_TYPE"), SQLDataType.INTEGER, this, "");

    private SystemProcedures(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SystemProcedures(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("the procedures, SQL functions, trigger body routines and UDT methods defined within the database"), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES</code> table
     * reference
     */
    public SystemProcedures(String alias) {
        this(DSL.name(alias), SYSTEM_PROCEDURES);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES</code> table
     * reference
     */
    public SystemProcedures(Name alias) {
        this(alias, SYSTEM_PROCEDURES);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.SYSTEM_PROCEDURES</code> table
     * reference
     */
    public SystemProcedures() {
        this(DSL.name("SYSTEM_PROCEDURES"), null);
    }

    public <O extends Record> SystemProcedures(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSTEM_PROCEDURES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SystemProcedures as(String alias) {
        return new SystemProcedures(DSL.name(alias), this);
    }

    @Override
    public SystemProcedures as(Name alias) {
        return new SystemProcedures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemProcedures rename(String name) {
        return new SystemProcedures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemProcedures rename(Name name) {
        return new SystemProcedures(name, null);
    }
}
