/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.system_lobs.tables;


import java.util.Arrays;
import java.util.List;

import net.tuxanna.database.jooq.system_lobs.Indexes;
import net.tuxanna.database.jooq.system_lobs.Keys;
import net.tuxanna.database.jooq.system_lobs.SystemLobs;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LobIds extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SYSTEM_LOBS.LOB_IDS</code>
     */
    public static final LobIds LOB_IDS = new LobIds();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>SYSTEM_LOBS.LOB_IDS.LOB_ID</code>.
     */
    public final TableField<Record, Long> LOB_ID = createField(DSL.name("LOB_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>SYSTEM_LOBS.LOB_IDS.LOB_LENGTH</code>.
     */
    public final TableField<Record, Long> LOB_LENGTH = createField(DSL.name("LOB_LENGTH"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SYSTEM_LOBS.LOB_IDS.LOB_USAGE_COUNT</code>.
     */
    public final TableField<Record, Integer> LOB_USAGE_COUNT = createField(DSL.name("LOB_USAGE_COUNT"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>SYSTEM_LOBS.LOB_IDS.LOB_TYPE</code>.
     */
    public final TableField<Record, Short> LOB_TYPE = createField(DSL.name("LOB_TYPE"), SQLDataType.SMALLINT.nullable(false), this, "");

    private LobIds(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private LobIds(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SYSTEM_LOBS.LOB_IDS</code> table reference
     */
    public LobIds(String alias) {
        this(DSL.name(alias), LOB_IDS);
    }

    /**
     * Create an aliased <code>SYSTEM_LOBS.LOB_IDS</code> table reference
     */
    public LobIds(Name alias) {
        this(alias, LOB_IDS);
    }

    /**
     * Create a <code>SYSTEM_LOBS.LOB_IDS</code> table reference
     */
    public LobIds() {
        this(DSL.name("LOB_IDS"), null);
    }

    public <O extends Record> LobIds(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, LOB_IDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SystemLobs.SYSTEM_LOBS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LOBS_IDX2);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.LOB_IDS_PK;
    }

    @Override
    public LobIds as(String alias) {
        return new LobIds(DSL.name(alias), this);
    }

    @Override
    public LobIds as(Name alias) {
        return new LobIds(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LobIds rename(String name) {
        return new LobIds(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LobIds rename(Name name) {
        return new LobIds(name, null);
    }
}
