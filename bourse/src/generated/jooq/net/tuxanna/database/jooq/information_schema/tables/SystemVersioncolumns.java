/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * the visible columns of the accessible tables that are automatically updated
 * when any value in a row is updated
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemVersioncolumns extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS</code>
     */
    public static final SystemVersioncolumns SYSTEM_VERSIONCOLUMNS = new SystemVersioncolumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.SCOPE</code>.
     * not used
     */
    public final TableField<Record, Integer> SCOPE = createField(DSL.name("SCOPE"), SQLDataType.INTEGER, this, "not used");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.COLUMN_NAME</code>. column
     * name
     */
    public final TableField<Record, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "column name");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.DATA_TYPE</code>. SQL data
     * type from DITypes
     */
    public final TableField<Record, Short> DATA_TYPE = createField(DSL.name("DATA_TYPE"), SQLDataType.SMALLINT, this, "SQL data type from DITypes");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.TYPE_NAME</code>. Data
     * source dependent type name
     */
    public final TableField<Record, String> TYPE_NAME = createField(DSL.name("TYPE_NAME"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "Data source dependent type name");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.COLUMN_SIZE</code>.
     * precision
     */
    public final TableField<Record, Short> COLUMN_SIZE = createField(DSL.name("COLUMN_SIZE"), SQLDataType.SMALLINT, this, "precision");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.BUFFER_LENGTH</code>.
     * length of column value in bytes
     */
    public final TableField<Record, Integer> BUFFER_LENGTH = createField(DSL.name("BUFFER_LENGTH"), SQLDataType.INTEGER, this, "length of column value in bytes");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.DECIMAL_DIGITS</code>.
     * scale
     */
    public final TableField<Record, Short> DECIMAL_DIGITS = createField(DSL.name("DECIMAL_DIGITS"), SQLDataType.SMALLINT, this, "scale");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.PSEUDO_COLUMN</code>. is
     * this a pseudo column like an Oracle ROWID: { Unknown | Not Pseudo |
     * Pseudo }?
     */
    public final TableField<Record, Short> PSEUDO_COLUMN = createField(DSL.name("PSEUDO_COLUMN"), SQLDataType.SMALLINT, this, "is this a pseudo column like an Oracle ROWID: { Unknown | Not Pseudo | Pseudo }?");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.TABLE_CAT</code>. table
     * catalog
     */
    public final TableField<Record, String> TABLE_CAT = createField(DSL.name("TABLE_CAT"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "table catalog");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.TABLE_SCHEM</code>. table
     * schema
     */
    public final TableField<Record, String> TABLE_SCHEM = createField(DSL.name("TABLE_SCHEM"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "table schema");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS.TABLE_NAME</code>. simple
     * table name
     */
    public final TableField<Record, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "simple table name");

    private SystemVersioncolumns(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SystemVersioncolumns(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("the visible columns of the accessible tables that are automatically updated when any value in a row is updated"), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS</code>
     * table reference
     */
    public SystemVersioncolumns(String alias) {
        this(DSL.name(alias), SYSTEM_VERSIONCOLUMNS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS</code>
     * table reference
     */
    public SystemVersioncolumns(Name alias) {
        this(alias, SYSTEM_VERSIONCOLUMNS);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.SYSTEM_VERSIONCOLUMNS</code> table
     * reference
     */
    public SystemVersioncolumns() {
        this(DSL.name("SYSTEM_VERSIONCOLUMNS"), null);
    }

    public <O extends Record> SystemVersioncolumns(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSTEM_VERSIONCOLUMNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SystemVersioncolumns as(String alias) {
        return new SystemVersioncolumns(DSL.name(alias), this);
    }

    @Override
    public SystemVersioncolumns as(Name alias) {
        return new SystemVersioncolumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemVersioncolumns rename(String name) {
        return new SystemVersioncolumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemVersioncolumns rename(Name name) {
        return new SystemVersioncolumns(name, null);
    }
}
