/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema;


import net.tuxanna.database.jooq.information_schema.tables.AdministrableRoleAuthorizations;
import net.tuxanna.database.jooq.information_schema.tables.ApplicableRoles;
import net.tuxanna.database.jooq.information_schema.tables.Assertions;
import net.tuxanna.database.jooq.information_schema.tables.Authorizations;
import net.tuxanna.database.jooq.information_schema.tables.CharacterSets;
import net.tuxanna.database.jooq.information_schema.tables.CheckConstraintRoutineUsage;
import net.tuxanna.database.jooq.information_schema.tables.CheckConstraints;
import net.tuxanna.database.jooq.information_schema.tables.Collations;
import net.tuxanna.database.jooq.information_schema.tables.ColumnColumnUsage;
import net.tuxanna.database.jooq.information_schema.tables.ColumnDomainUsage;
import net.tuxanna.database.jooq.information_schema.tables.ColumnPrivileges;
import net.tuxanna.database.jooq.information_schema.tables.ColumnUdtUsage;
import net.tuxanna.database.jooq.information_schema.tables.Columns;
import net.tuxanna.database.jooq.information_schema.tables.ConstraintColumnUsage;
import net.tuxanna.database.jooq.information_schema.tables.ConstraintPeriodUsage;
import net.tuxanna.database.jooq.information_schema.tables.ConstraintTableUsage;
import net.tuxanna.database.jooq.information_schema.tables.DataTypePrivileges;
import net.tuxanna.database.jooq.information_schema.tables.DomainConstraints;
import net.tuxanna.database.jooq.information_schema.tables.Domains;
import net.tuxanna.database.jooq.information_schema.tables.ElementTypes;
import net.tuxanna.database.jooq.information_schema.tables.EnabledRoles;
import net.tuxanna.database.jooq.information_schema.tables.InformationSchemaCatalogName;
import net.tuxanna.database.jooq.information_schema.tables.JarJarUsage;
import net.tuxanna.database.jooq.information_schema.tables.Jars;
import net.tuxanna.database.jooq.information_schema.tables.KeyColumnUsage;
import net.tuxanna.database.jooq.information_schema.tables.KeyPeriodUsage;
import net.tuxanna.database.jooq.information_schema.tables.Parameters;
import net.tuxanna.database.jooq.information_schema.tables.Periods;
import net.tuxanna.database.jooq.information_schema.tables.ReferentialConstraints;
import net.tuxanna.database.jooq.information_schema.tables.RoleAuthorizationDescriptors;
import net.tuxanna.database.jooq.information_schema.tables.RoleColumnGrants;
import net.tuxanna.database.jooq.information_schema.tables.RoleRoutineGrants;
import net.tuxanna.database.jooq.information_schema.tables.RoleTableGrants;
import net.tuxanna.database.jooq.information_schema.tables.RoleUdtGrants;
import net.tuxanna.database.jooq.information_schema.tables.RoleUsageGrants;
import net.tuxanna.database.jooq.information_schema.tables.RoutineColumnUsage;
import net.tuxanna.database.jooq.information_schema.tables.RoutineJarUsage;
import net.tuxanna.database.jooq.information_schema.tables.RoutinePeriodUsage;
import net.tuxanna.database.jooq.information_schema.tables.RoutinePrivileges;
import net.tuxanna.database.jooq.information_schema.tables.RoutineRoutineUsage;
import net.tuxanna.database.jooq.information_schema.tables.RoutineSequenceUsage;
import net.tuxanna.database.jooq.information_schema.tables.RoutineTableUsage;
import net.tuxanna.database.jooq.information_schema.tables.Routines;
import net.tuxanna.database.jooq.information_schema.tables.Schemata;
import net.tuxanna.database.jooq.information_schema.tables.Sequences;
import net.tuxanna.database.jooq.information_schema.tables.SqlFeatures;
import net.tuxanna.database.jooq.information_schema.tables.SqlImplementationInfo;
import net.tuxanna.database.jooq.information_schema.tables.SqlPackages;
import net.tuxanna.database.jooq.information_schema.tables.SqlParts;
import net.tuxanna.database.jooq.information_schema.tables.SqlSizing;
import net.tuxanna.database.jooq.information_schema.tables.SqlSizingProfiles;
import net.tuxanna.database.jooq.information_schema.tables.SystemBestrowidentifier;
import net.tuxanna.database.jooq.information_schema.tables.SystemCacheinfo;
import net.tuxanna.database.jooq.information_schema.tables.SystemColumnSequenceUsage;
import net.tuxanna.database.jooq.information_schema.tables.SystemColumns;
import net.tuxanna.database.jooq.information_schema.tables.SystemComments;
import net.tuxanna.database.jooq.information_schema.tables.SystemConnectionProperties;
import net.tuxanna.database.jooq.information_schema.tables.SystemCrossreference;
import net.tuxanna.database.jooq.information_schema.tables.SystemIndexinfo;
import net.tuxanna.database.jooq.information_schema.tables.SystemIndexstats;
import net.tuxanna.database.jooq.information_schema.tables.SystemKeyIndexUsage;
import net.tuxanna.database.jooq.information_schema.tables.SystemPrimarykeys;
import net.tuxanna.database.jooq.information_schema.tables.SystemProcedurecolumns;
import net.tuxanna.database.jooq.information_schema.tables.SystemProcedures;
import net.tuxanna.database.jooq.information_schema.tables.SystemProperties;
import net.tuxanna.database.jooq.information_schema.tables.SystemSchemas;
import net.tuxanna.database.jooq.information_schema.tables.SystemSequences;
import net.tuxanna.database.jooq.information_schema.tables.SystemSessioninfo;
import net.tuxanna.database.jooq.information_schema.tables.SystemSessions;
import net.tuxanna.database.jooq.information_schema.tables.SystemSynonyms;
import net.tuxanna.database.jooq.information_schema.tables.SystemTables;
import net.tuxanna.database.jooq.information_schema.tables.SystemTablestats;
import net.tuxanna.database.jooq.information_schema.tables.SystemTabletypes;
import net.tuxanna.database.jooq.information_schema.tables.SystemTexttables;
import net.tuxanna.database.jooq.information_schema.tables.SystemTypeinfo;
import net.tuxanna.database.jooq.information_schema.tables.SystemUdtattributes;
import net.tuxanna.database.jooq.information_schema.tables.SystemUdts;
import net.tuxanna.database.jooq.information_schema.tables.SystemUsers;
import net.tuxanna.database.jooq.information_schema.tables.SystemVersioncolumns;
import net.tuxanna.database.jooq.information_schema.tables.TableConstraints;
import net.tuxanna.database.jooq.information_schema.tables.TablePrivileges;
import net.tuxanna.database.jooq.information_schema.tables.Translations;
import net.tuxanna.database.jooq.information_schema.tables.TriggerColumnUsage;
import net.tuxanna.database.jooq.information_schema.tables.TriggerPeriodUsage;
import net.tuxanna.database.jooq.information_schema.tables.TriggerRoutineUsage;
import net.tuxanna.database.jooq.information_schema.tables.TriggerSequenceUsage;
import net.tuxanna.database.jooq.information_schema.tables.TriggerTableUsage;
import net.tuxanna.database.jooq.information_schema.tables.TriggeredUpdateColumns;
import net.tuxanna.database.jooq.information_schema.tables.Triggers;
import net.tuxanna.database.jooq.information_schema.tables.UdtPrivileges;
import net.tuxanna.database.jooq.information_schema.tables.UsagePrivileges;
import net.tuxanna.database.jooq.information_schema.tables.UserDefinedTypes;
import net.tuxanna.database.jooq.information_schema.tables.ViewColumnUsage;
import net.tuxanna.database.jooq.information_schema.tables.ViewPeriodUsage;
import net.tuxanna.database.jooq.information_schema.tables.ViewRoutineUsage;
import net.tuxanna.database.jooq.information_schema.tables.ViewTableUsage;
import net.tuxanna.database.jooq.information_schema.tables.Views;


/**
 * Convenience access to all tables in INFORMATION_SCHEMA.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tables {

    /**
     * one row for each role that can be granted
     */
    public static final AdministrableRoleAuthorizations ADMINISTRABLE_ROLE_AUTHORIZATIONS = AdministrableRoleAuthorizations.ADMINISTRABLE_ROLE_AUTHORIZATIONS;

    /**
     * one row for each role granted to an authorization
     */
    public static final ApplicableRoles APPLICABLE_ROLES = ApplicableRoles.APPLICABLE_ROLES;

    /**
     * The table <code>INFORMATION_SCHEMA.ASSERTIONS</code>.
     */
    public static final Assertions ASSERTIONS = Assertions.ASSERTIONS;

    /**
     * one row for each user and one row for each role
     */
    public static final Authorizations AUTHORIZATIONS = Authorizations.AUTHORIZATIONS;

    /**
     * one row for each character set name
     */
    public static final CharacterSets CHARACTER_SETS = CharacterSets.CHARACTER_SETS;

    /**
     * one row for each SQL-invoked routine identified as the subject routine of
     * either a &lt;routine invocation&gt;, a &lt;method reference&gt;, a 
     * &lt;method invocation&gt;, or a &lt;static method invocation&gt; 
     * contained in an &lt;assertion definition&gt;, a &lt;domain
     * constraint&gt;, or a &lt;table constraint definition&gt;.
     */
    public static final CheckConstraintRoutineUsage CHECK_CONSTRAINT_ROUTINE_USAGE = CheckConstraintRoutineUsage.CHECK_CONSTRAINT_ROUTINE_USAGE;

    /**
     * one row for each domain constraint, table check constraint, and
     * assertion.
     */
    public static final CheckConstraints CHECK_CONSTRAINTS = CheckConstraints.CHECK_CONSTRAINTS;

    /**
     * one row for each character collation descriptor.
     */
    public static final Collations COLLATIONS = Collations.COLLATIONS;

    /**
     * one row for each usage of a column in a generated column definition
     */
    public static final ColumnColumnUsage COLUMN_COLUMN_USAGE = ColumnColumnUsage.COLUMN_COLUMN_USAGE;

    /**
     * one row for each usage of a domain as the type of a column
     */
    public static final ColumnDomainUsage COLUMN_DOMAIN_USAGE = ColumnDomainUsage.COLUMN_DOMAIN_USAGE;

    /**
     * the visible user level access permissions of each visible column of each
     * accessible table defined within this database
     */
    public static final ColumnPrivileges COLUMN_PRIVILEGES = ColumnPrivileges.COLUMN_PRIVILEGES;

    /**
     * one row for each usage of a user defined type as the type of a column
     */
    public static final ColumnUdtUsage COLUMN_UDT_USAGE = ColumnUdtUsage.COLUMN_UDT_USAGE;

    /**
     * one row for each column of table of view
     */
    public static final Columns COLUMNS = Columns.COLUMNS;

    /**
     * one row for each column identified by a &lt;column reference&gt;
     * contained in the &lt;search condition&gt; of a check constraint, domain
     * constraint, or assertion.
     */
    public static final ConstraintColumnUsage CONSTRAINT_COLUMN_USAGE = ConstraintColumnUsage.CONSTRAINT_COLUMN_USAGE;

    /**
     * one row for each usage of a period in a referential constraint
     */
    public static final ConstraintPeriodUsage CONSTRAINT_PERIOD_USAGE = ConstraintPeriodUsage.CONSTRAINT_PERIOD_USAGE;

    /**
     * one row for each table identified by a &lt;table name&gt; simply
     * contained in a &lt;table reference&gt; contained in the &lt;search
     * condition&gt; of a check constraint, domain constraint, or assertion.
     */
    public static final ConstraintTableUsage CONSTRAINT_TABLE_USAGE = ConstraintTableUsage.CONSTRAINT_TABLE_USAGE;

    /**
     * one row for each usage privilege granted on a user defined type
     */
    public static final DataTypePrivileges DATA_TYPE_PRIVILEGES = DataTypePrivileges.DATA_TYPE_PRIVILEGES;

    /**
     * one row for each check constraint included in a domain definition
     */
    public static final DomainConstraints DOMAIN_CONSTRAINTS = DomainConstraints.DOMAIN_CONSTRAINTS;

    /**
     * one row for each domain identified
     */
    public static final Domains DOMAINS = Domains.DOMAINS;

    /**
     * The table <code>INFORMATION_SCHEMA.ELEMENT_TYPES</code>.
     */
    public static final ElementTypes ELEMENT_TYPES = ElementTypes.ELEMENT_TYPES;

    /**
     * The table <code>INFORMATION_SCHEMA.ENABLED_ROLES</code>.
     */
    public static final EnabledRoles ENABLED_ROLES = EnabledRoles.ENABLED_ROLES;

    /**
     * the catalog defined within this database
     */
    public static final InformationSchemaCatalogName INFORMATION_SCHEMA_CATALOG_NAME = InformationSchemaCatalogName.INFORMATION_SCHEMA_CATALOG_NAME;

    /**
     * The table <code>INFORMATION_SCHEMA.JAR_JAR_USAGE</code>.
     */
    public static final JarJarUsage JAR_JAR_USAGE = JarJarUsage.JAR_JAR_USAGE;

    /**
     * The table <code>INFORMATION_SCHEMA.JARS</code>.
     */
    public static final Jars JARS = Jars.JARS;

    /**
     * one row for each column used in s primary key or unique constraint
     */
    public static final KeyColumnUsage KEY_COLUMN_USAGE = KeyColumnUsage.KEY_COLUMN_USAGE;

    /**
     * one row for each period used in s primary key or unique constraint
     */
    public static final KeyPeriodUsage KEY_PERIOD_USAGE = KeyPeriodUsage.KEY_PERIOD_USAGE;

    /**
     * one row for each routine parameter
     */
    public static final Parameters PARAMETERS = Parameters.PARAMETERS;

    /**
     * one row for each system time or application period
     */
    public static final Periods PERIODS = Periods.PERIODS;

    /**
     * one row for each foreign key constraint
     */
    public static final ReferentialConstraints REFERENTIAL_CONSTRAINTS = ReferentialConstraints.REFERENTIAL_CONSTRAINTS;

    /**
     * one row for each role granted directly to a grantee
     */
    public static final RoleAuthorizationDescriptors ROLE_AUTHORIZATION_DESCRIPTORS = RoleAuthorizationDescriptors.ROLE_AUTHORIZATION_DESCRIPTORS;

    /**
     * one row for each privilege on a column granted to a role
     */
    public static final RoleColumnGrants ROLE_COLUMN_GRANTS = RoleColumnGrants.ROLE_COLUMN_GRANTS;

    /**
     * one row for each usage grant on a routine to a role
     */
    public static final RoleRoutineGrants ROLE_ROUTINE_GRANTS = RoleRoutineGrants.ROLE_ROUTINE_GRANTS;

    /**
     * one row for each privilege grant on a table to a role
     */
    public static final RoleTableGrants ROLE_TABLE_GRANTS = RoleTableGrants.ROLE_TABLE_GRANTS;

    /**
     * one row for each usage grant on a user defined type to a role
     */
    public static final RoleUdtGrants ROLE_UDT_GRANTS = RoleUdtGrants.ROLE_UDT_GRANTS;

    /**
     * one row for each usage grant to a role
     */
    public static final RoleUsageGrants ROLE_USAGE_GRANTS = RoleUsageGrants.ROLE_USAGE_GRANTS;

    /**
     * one row for each table column usage in a routine
     */
    public static final RoutineColumnUsage ROUTINE_COLUMN_USAGE = RoutineColumnUsage.ROUTINE_COLUMN_USAGE;

    /**
     * The table <code>INFORMATION_SCHEMA.ROUTINE_JAR_USAGE</code>.
     */
    public static final RoutineJarUsage ROUTINE_JAR_USAGE = RoutineJarUsage.ROUTINE_JAR_USAGE;

    /**
     * one row for each usage of a period in a routine
     */
    public static final RoutinePeriodUsage ROUTINE_PERIOD_USAGE = RoutinePeriodUsage.ROUTINE_PERIOD_USAGE;

    /**
     * one row for each usage privilege on a routine
     */
    public static final RoutinePrivileges ROUTINE_PRIVILEGES = RoutinePrivileges.ROUTINE_PRIVILEGES;

    /**
     * one row for each usage of a routine in a routine
     */
    public static final RoutineRoutineUsage ROUTINE_ROUTINE_USAGE = RoutineRoutineUsage.ROUTINE_ROUTINE_USAGE;

    /**
     * one row for each usage of a sequence in a routine
     */
    public static final RoutineSequenceUsage ROUTINE_SEQUENCE_USAGE = RoutineSequenceUsage.ROUTINE_SEQUENCE_USAGE;

    /**
     * one row for each usage of a table in a routine
     */
    public static final RoutineTableUsage ROUTINE_TABLE_USAGE = RoutineTableUsage.ROUTINE_TABLE_USAGE;

    /**
     * one row for each routine
     */
    public static final Routines ROUTINES = Routines.ROUTINES;

    /**
     * one row for each schema
     */
    public static final Schemata SCHEMATA = Schemata.SCHEMATA;

    /**
     * one row for each external sequence generator
     */
    public static final Sequences SEQUENCES = Sequences.SEQUENCES;

    /**
     * list of supported SQL Standard features
     */
    public static final SqlFeatures SQL_FEATURES = SqlFeatures.SQL_FEATURES;

    /**
     * list of implementation specific limits
     */
    public static final SqlImplementationInfo SQL_IMPLEMENTATION_INFO = SqlImplementationInfo.SQL_IMPLEMENTATION_INFO;

    /**
     * list of supported SQL Standard packages
     */
    public static final SqlPackages SQL_PACKAGES = SqlPackages.SQL_PACKAGES;

    /**
     * list of supported SQL Standard parts
     */
    public static final SqlParts SQL_PARTS = SqlParts.SQL_PARTS;

    /**
     * list of size limits for names and database objects
     */
    public static final SqlSizing SQL_SIZING = SqlSizing.SQL_SIZING;

    /**
     * list of supported SQL Standard packages
     */
    public static final SqlSizingProfiles SQL_SIZING_PROFILES = SqlSizingProfiles.SQL_SIZING_PROFILES;

    /**
     * for each accessible table defined within this database, the optimal set
     * of visible columns that uniquely identifies a row
         */
    public static final SystemBestrowidentifier SYSTEM_BESTROWIDENTIFIER = SystemBestrowidentifier.SYSTEM_BESTROWIDENTIFIER;

    /**
     * the current state of the system row caching mechanism
     */
    public static final SystemCacheinfo SYSTEM_CACHEINFO = SystemCacheinfo.SYSTEM_CACHEINFO;

    /**
     * the name of the sequences used by autogenerated columns
     */
    public static final SystemColumnSequenceUsage SYSTEM_COLUMN_SEQUENCE_USAGE = SystemColumnSequenceUsage.SYSTEM_COLUMN_SEQUENCE_USAGE;

    /**
     * the visible columns of each accessible table defined within this database
     */
    public static final SystemColumns SYSTEM_COLUMNS = SystemColumns.SYSTEM_COLUMNS;

    /**
     * comments on tables, views, columns, sequences, triggers and routines
     * defined by users or system
     */
    public static final SystemComments SYSTEM_COMMENTS = SystemComments.SYSTEM_COMMENTS;

    /**
     * properties defined for the current connection
     */
    public static final SystemConnectionProperties SYSTEM_CONNECTION_PROPERTIES = SystemConnectionProperties.SYSTEM_CONNECTION_PROPERTIES;

    /**
     * a description of how the accessible tables defined within this database
     * import visible columns to enforce referential integrity
     */
    public static final SystemCrossreference SYSTEM_CROSSREFERENCE = SystemCrossreference.SYSTEM_CROSSREFERENCE;

    /**
     * information about the indices of each accessible table defined within
     * this database
     */
    public static final SystemIndexinfo SYSTEM_INDEXINFO = SystemIndexinfo.SYSTEM_INDEXINFO;

    /**
     * storage space used by the indices of each accessible table defined within
     * this database
     */
    public static final SystemIndexstats SYSTEM_INDEXSTATS = SystemIndexstats.SYSTEM_INDEXSTATS;

    /**
     * names of indexes generated by the system for each constraint
     */
    public static final SystemKeyIndexUsage SYSTEM_KEY_INDEX_USAGE = SystemKeyIndexUsage.SYSTEM_KEY_INDEX_USAGE;

    /**
     * the visible columns of the primary key of each accessible table defined
     * within this database
     */
    public static final SystemPrimarykeys SYSTEM_PRIMARYKEYS = SystemPrimarykeys.SYSTEM_PRIMARYKEYS;

    /**
     * a description of the return type, parameters and result columns of each
     * accessible callable procedure, SQL function, trigger body and UDT method
     * defined within this database
     */
    public static final SystemProcedurecolumns SYSTEM_PROCEDURECOLUMNS = SystemProcedurecolumns.SYSTEM_PROCEDURECOLUMNS;

    /**
     * the procedures, SQL functions, trigger body routines and UDT methods
     * defined within the database
     */
    public static final SystemProcedures SYSTEM_PROCEDURES = SystemProcedures.SYSTEM_PROCEDURES;

    /**
     * the system properties and operating parameters of this database
     */
    public static final SystemProperties SYSTEM_PROPERTIES = SystemProperties.SYSTEM_PROPERTIES;

    /**
     * the accessible schemas defined within this database
     */
    public static final SystemSchemas SYSTEM_SCHEMAS = SystemSchemas.SYSTEM_SCHEMAS;

    /**
     * the visible sequences in this database
     */
    public static final SystemSequences SYSTEM_SEQUENCES = SystemSequences.SYSTEM_SEQUENCES;

    /**
     * information about the current database session
     */
    public static final SystemSessioninfo SYSTEM_SESSIONINFO = SystemSessioninfo.SYSTEM_SESSIONINFO;

    /**
     * the visible sessions open in this database
     */
    public static final SystemSessions SYSTEM_SESSIONS = SystemSessions.SYSTEM_SESSIONS;

    /**
     * the synonyms for tables and other objects defined in this database
     */
    public static final SystemSynonyms SYSTEM_SYNONYMS = SystemSynonyms.SYSTEM_SYNONYMS;

    /**
     * the accessible tables defined within this database
     */
    public static final SystemTables SYSTEM_TABLES = SystemTables.SYSTEM_TABLES;

    /**
     * cardinality and storage space used by tables and table spaces
     */
    public static final SystemTablestats SYSTEM_TABLESTATS = SystemTablestats.SYSTEM_TABLESTATS;

    /**
     * the types of tables that can be created/found within this database
     */
    public static final SystemTabletypes SYSTEM_TABLETYPES = SystemTabletypes.SYSTEM_TABLETYPES;

    /**
     * the data source descriptors of the accessible TEXT TABLE objects defined
     * within this database
     */
    public static final SystemTexttables SYSTEM_TEXTTABLES = SystemTexttables.SYSTEM_TEXTTABLES;

    /**
     * a description of predefined table column data types known to this
     * database
     */
    public static final SystemTypeinfo SYSTEM_TYPEINFO = SystemTypeinfo.SYSTEM_TYPEINFO;

    /**
     * The table <code>INFORMATION_SCHEMA.SYSTEM_UDTATTRIBUTES</code>.
     */
    public static final SystemUdtattributes SYSTEM_UDTATTRIBUTES = SystemUdtattributes.SYSTEM_UDTATTRIBUTES;

    /**
     * the user-defined types that are available within this database
     */
    public static final SystemUdts SYSTEM_UDTS = SystemUdts.SYSTEM_UDTS;

    /**
     * users defined within this database
     */
    public static final SystemUsers SYSTEM_USERS = SystemUsers.SYSTEM_USERS;

    /**
     * the visible columns of the accessible tables that are automatically
     * updated when any value in a row is updated
     */
    public static final SystemVersioncolumns SYSTEM_VERSIONCOLUMNS = SystemVersioncolumns.SYSTEM_VERSIONCOLUMNS;

    /**
     * one row for each table constraint associated with a table
     */
    public static final TableConstraints TABLE_CONSTRAINTS = TableConstraints.TABLE_CONSTRAINTS;

    /**
     * the visible user level access permissions for each accessible table
     * defined within this database
     */
    public static final TablePrivileges TABLE_PRIVILEGES = TablePrivileges.TABLE_PRIVILEGES;

    /**
     * one row for each table or view
     */
    public static final net.tuxanna.database.jooq.information_schema.tables.Tables TABLES = net.tuxanna.database.jooq.information_schema.tables.Tables.TABLES;

    /**
     * The table <code>INFORMATION_SCHEMA.TRANSLATIONS</code>.
     */
    public static final Translations TRANSLATIONS = Translations.TRANSLATIONS;

    /**
     * one row for each usage of a table column in a trigger definition
     */
    public static final TriggerColumnUsage TRIGGER_COLUMN_USAGE = TriggerColumnUsage.TRIGGER_COLUMN_USAGE;

    /**
     * one row for each usage of a period in a trigger definition
     */
    public static final TriggerPeriodUsage TRIGGER_PERIOD_USAGE = TriggerPeriodUsage.TRIGGER_PERIOD_USAGE;

    /**
     * one row for each usage of a routine in a trigger definition
     */
    public static final TriggerRoutineUsage TRIGGER_ROUTINE_USAGE = TriggerRoutineUsage.TRIGGER_ROUTINE_USAGE;

    /**
     * one row for each usage of a sequence in a trigger definition
     */
    public static final TriggerSequenceUsage TRIGGER_SEQUENCE_USAGE = TriggerSequenceUsage.TRIGGER_SEQUENCE_USAGE;

    /**
     * one row for each usage of a table or view in a trigger definition
     */
    public static final TriggerTableUsage TRIGGER_TABLE_USAGE = TriggerTableUsage.TRIGGER_TABLE_USAGE;

    /**
     * one row for each column in a foreign key cascade action
     */
    public static final TriggeredUpdateColumns TRIGGERED_UPDATE_COLUMNS = TriggeredUpdateColumns.TRIGGERED_UPDATE_COLUMNS;

    /**
     * one row for each trigger definition
     */
    public static final Triggers TRIGGERS = Triggers.TRIGGERS;

    /**
     * one row for each usage privilege on a user defined type
     */
    public static final UdtPrivileges UDT_PRIVILEGES = UdtPrivileges.UDT_PRIVILEGES;

    /**
     * one row for each usage privilege granted on character set or domain
     */
    public static final UsagePrivileges USAGE_PRIVILEGES = UsagePrivileges.USAGE_PRIVILEGES;

    /**
     * one row for each user defined type
     */
    public static final UserDefinedTypes USER_DEFINED_TYPES = UserDefinedTypes.USER_DEFINED_TYPES;

    /**
     * one row for each column of a table that is explicitly or implicitly
     * referenced in the &lt;query expression&gt; of the view being described
     */
    public static final ViewColumnUsage VIEW_COLUMN_USAGE = ViewColumnUsage.VIEW_COLUMN_USAGE;

    /**
     * one row for each usage of period in a view
     */
    public static final ViewPeriodUsage VIEW_PERIOD_USAGE = ViewPeriodUsage.VIEW_PERIOD_USAGE;

    /**
     * one row for each SQL-invoked routine identified as the subject routine of
     * either a &lt;routine invocation&gt;, a &lt;method reference&gt;, a
     * &lt;method invocation&gt;, or a &lt;static method invocation&gt;
     * contained in a &lt;view definition&gt;
     */
    public static final ViewRoutineUsage VIEW_ROUTINE_USAGE = ViewRoutineUsage.VIEW_ROUTINE_USAGE;

    /**
     * one row for each table identified by a &lt;table name&gt; simply
     * contained in a &lt;table reference&gt; that is contained in the &lt;query
     * expression&gt; of a view
     */
    public static final ViewTableUsage VIEW_TABLE_USAGE = ViewTableUsage.VIEW_TABLE_USAGE;

    /**
     * the view descriptors of the accessible views defined within this database
     */
    public static final Views VIEWS = Views.VIEWS;
}
