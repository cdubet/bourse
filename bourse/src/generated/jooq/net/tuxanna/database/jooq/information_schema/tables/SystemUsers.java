/*
 * This file is generated by jOOQ.
 */
package net.tuxanna.database.jooq.information_schema.tables;


import net.tuxanna.database.jooq.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * users defined within this database
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemUsers extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.SYSTEM_USERS</code>
     */
    public static final SystemUsers SYSTEM_USERS = new SystemUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_USERS.USER_NAME</code>. user
     * name
     */
    public final TableField<Record, String> USER_NAME = createField(DSL.name("USER_NAME"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "user name");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_USERS.ADMIN</code>. has the
     * administrative privilege?
     */
    public final TableField<Record, Boolean> ADMIN = createField(DSL.name("ADMIN"), SQLDataType.BOOLEAN, this, "has the administrative privilege?");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_USERS.INITIAL_SCHEMA</code>.
     * initial schema for user
     */
    public final TableField<Record, String> INITIAL_SCHEMA = createField(DSL.name("INITIAL_SCHEMA"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "initial schema for user");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_USERS.AUTHENTICATION</code>.
     * method of identification for the user
     */
    public final TableField<Record, String> AUTHENTICATION = createField(DSL.name("AUTHENTICATION"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "method of identification for the user");

    /**
     * The column <code>INFORMATION_SCHEMA.SYSTEM_USERS.PASSWORD_DIGEST</code>.
     * password digest
     */
    public final TableField<Record, String> PASSWORD_DIGEST = createField(DSL.name("PASSWORD_DIGEST"), net.tuxanna.database.jooq.information_schema.Domains.SQL_IDENTIFIER.getDataType(), this, "password digest");

    private SystemUsers(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SystemUsers(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("users defined within this database"), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_USERS</code> table
     * reference
     */
    public SystemUsers(String alias) {
        this(DSL.name(alias), SYSTEM_USERS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SYSTEM_USERS</code> table
     * reference
     */
    public SystemUsers(Name alias) {
        this(alias, SYSTEM_USERS);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.SYSTEM_USERS</code> table reference
     */
    public SystemUsers() {
        this(DSL.name("SYSTEM_USERS"), null);
    }

    public <O extends Record> SystemUsers(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SYSTEM_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SystemUsers as(String alias) {
        return new SystemUsers(DSL.name(alias), this);
    }

    @Override
    public SystemUsers as(Name alias) {
        return new SystemUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemUsers rename(String name) {
        return new SystemUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemUsers rename(Name name) {
        return new SystemUsers(name, null);
    }
}
