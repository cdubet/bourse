/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */


plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
 
    id 'nu.studer.jooq' version '5.1.0'

}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}
dependencies {
	    
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:28.2-jre'

	implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
	
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api',version: '2.6.2' //version: '2.13.3'
  	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.2' //version: '2.13.3'
  
	implementation group: 'org.hsqldb', name: 'hsqldb' ,version: '2.5.1'
	
	
	implementation group: 'com.googlecode.jatl', name: 'jatl', version: '0.2.3'    
    implementation group: 'org.apache.commons',name:'commons-lang3',version:'3.4' //'3.11'
    implementation group: 'org.apache.commons' , name:'commons-email', version:'1.5'

    implementation group: 'org.jsoup',name:'jsoup',version:'1.13.1'



	implementation 'info.picocli:picocli:4.6.1'
	annotationProcessor 'info.picocli:picocli-codegen:4.6.1'
	    
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    //TODO use https://github.com/ferigma/dbunit-gradle-plugin
    testImplementation 'org.dbunit:dbunit:2.7.0'

    jooqGenerator 'org.hsqldb:hsqldb:2.5.1'
}

jooq {
  version = '3.14.4'  // the default (can be omitted)
  edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)
}


jooq {
    version = '3.14.4'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.hsqldb.jdbcDriver'
                    url = 'jdbc:hsqldb:file:/home/christian/PORTEFEUILLE/portefeuilleDb'
                    user = 'portefeuille'
                    password = 'Dubettier!'
                    properties {
                        property {
                            key = 'PAGE_SIZE'
                            value = 2048
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.hsqldb.HSQLDBDatabase'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = false
                        immutablePojos = false
                        fluentSetters = false
                    }
                    target {
                        packageName = 'net.tuxanna.database.jooq'
                        directory = 'src/generated/jooq'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}

jar {
   		// Keep jar clean:
    	exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'


	    manifest {
	        attributes "Main-Class": "net.tuxanna.portefeuille.Portefeuille"
	    }
	    from {
	        // keep jar in jar -Smaller but path is wrong configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { it }
	        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	    }
	}
